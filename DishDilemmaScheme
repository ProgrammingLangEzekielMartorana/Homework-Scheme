;satisfactory_meal? Meal function
;Meal is a list of lists (Dish_number Has_meat? Has_vegetables? Organic? Is_dessert? Has_dairy?)


; Alice will not eat meat
; Bob will not eat vegetables
; Cheryl will only eat organic
; Diane will not eat dessert
; Edgar will not eat dairy


(define (satisfy? x)
;if x >= 3, where x is the number of satisfying meals #T
;Otherwise #F
(cond((>= x 3) #T)
(else #F)))



(define (satisfy_Alice Meal)
  (cond((null? Meal) 0)
      (( = (cadar Meal) 0) (+ 1 (satisfy_Alice (cdr Meal))))
      (else (satisfy_Alice (cdr Meal)))))
      
(define (satisfy_Bob Meal)
  (cond((null? Meal) 0)
      (( = (caddar Meal) 0) (+ 1 (satisfy_Bob (cdr Meal))))
      (else (satisfy_Bob (cdr Meal)))))
      
(define (satisfy_Cheryl Meal)
  (cond((null? Meal) 0)
      (else ( + (car (cdddr (car Meal))) (satisfy_Cheryl (cdr Meal))))))

(define (satisfy_Diane Meal)
   (cond((null? Meal) 0)
      (( = ( caddr (cddar Meal)) 0) (+ 1 (satisfy_Diane (cdr Meal))))			;caddddr
      (else (satisfy_Diane (cdr Meal)))))
      
(define (satisfy_Edgar Meal)
  (cond((null? Meal) 0)
      (( = (caddr(cdddar Meal)) 0) (+ 1 (satisfy_Edgar (cdr Meal))))
      (else (satisfy_Edgar (cdr Meal)))))

(define (satisfactory_meal? Meal)
; return true if everyone can eat at least three dishes
; return false if otherwise
  (cond ((and (satisfy? (satisfy_Alice Meal))
			(and (satisfy? (satisfy_Bob Meal))
				(and (satisfy? (satisfy_Cheryl Meal))
				(and (satisfy? (satisfy_Diane Meal)) (satisfy? (satisfy_Edgar Meal))))))#T)
				(else #F)))

(satisfactory_meal? '((8 1 0 1 0 0) (9 0 1 1 0 0) (23 0 0 1 0 0) (2 0 0 1 1 0) (6 0 0 1 1 1)))
